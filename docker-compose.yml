# ðŸ”¬ Compensation Research System - Docker Compose Configuration

version: '3.8'

services:
  # =================== CORE APPLICATION ===================
  compensation-research:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: compensation-research-app
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379/0
      - POSTGRES_URL=postgresql://research:research@postgres:5432/compensation_db
    volumes:
      - vault-data:/app/Compensation-Research-Vault
      - logs-data:/app/logs
      - cache-data:/app/cache
      - backups-data:/app/backups
      - ./config:/app/config:ro
    depends_on:
      - redis
      - postgres
      - prometheus
    networks:
      - research-network
    labels:
      - "com.compensation.service=research-app"
      - "com.compensation.version=1.0.0"
    healthcheck:
      test: ["CMD", "python", "scripts/health_check.py"]
      interval: 5m
      timeout: 30s
      retries: 3
      start_period: 1m

  # =================== CACHING LAYER ===================
  redis:
    image: redis:7-alpine
    container_name: compensation-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - research-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # =================== DATABASE ===================
  postgres:
    image: postgres:15-alpine
    container_name: compensation-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: compensation_db
      POSTGRES_USER: research
      POSTGRES_PASSWORD: research
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - research-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U research -d compensation_db"]
      interval: 30s
      timeout: 5s
      retries: 3

  # =================== MONITORING ===================
  prometheus:
    image: prom/prometheus:latest
    container_name: compensation-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - research-network

  grafana:
    image: grafana/grafana:latest
    container_name: compensation-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=research
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - research-network

  # =================== LOG AGGREGATION ===================
  loki:
    image: grafana/loki:latest
    container_name: compensation-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki-data:/loki
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    networks:
      - research-network

  promtail:
    image: grafana/promtail:latest
    container_name: compensation-promtail
    restart: unless-stopped
    volumes:
      - logs-data:/var/log/compensation:ro
      - ./monitoring/promtail.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - research-network

  # =================== BACKUP SERVICE ===================
  backup-service:
    build:
      context: .
      dockerfile: Dockerfile.backup
    container_name: compensation-backup
    restart: unless-stopped
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - BACKUP_BUCKET=${BACKUP_BUCKET}
    volumes:
      - vault-data:/backup/vault:ro
      - postgres-data:/backup/postgres:ro
      - redis-data:/backup/redis:ro
      - backups-data:/backups
    depends_on:
      - compensation-research
      - postgres
      - redis
    networks:
      - research-network

  # =================== NGINX REVERSE PROXY ===================
  nginx:
    image: nginx:alpine
    container_name: compensation-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - vault-data:/usr/share/nginx/html/vault:ro
    depends_on:
      - compensation-research
      - grafana
    networks:
      - research-network

# =================== NETWORKS ===================
networks:
  research-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =================== VOLUMES ===================
volumes:
  vault-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/vault

  postgres-data:
    driver: local

  redis-data:
    driver: local

  prometheus-data:
    driver: local

  grafana-data:
    driver: local

  loki-data:
    driver: local

  logs-data:
    driver: local

  cache-data:
    driver: local

  backups-data:
    driver: local